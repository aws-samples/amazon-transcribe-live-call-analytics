AWSTemplateFormatVersion: "2010-09-09"
Description: Amazon Transcribe Live Meeting Assist - Websocket Server

Parameters:
  LCAStackName:
    Type: String
    Default: "LCA"
    Description: The name of the Live Connect Assistant stack

  CloudWatchLogsExpirationInDays:
    Type: Number
    Default: 14
    Description: The number of days log events are kept in CloudWatch Logs.

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/VPC"

  VPCIGW:
    Type: AWS::EC2::InternetGateway

  VPCGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: VPCIGW

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays:
        Ref: CloudWatchLogsExpirationInDays
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: >-
              By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch
              server-side encryption keys (AWS Managed Keys).

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              "Allow Resource * for CloudWatch Logs API since the resources are customer
              defined."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt "VPCFlowLogsRole.Arn"
      LogGroupName: !Ref "VPCFlowLogsLogGroup"
      ResourceId: !Ref "VPC"
      ResourceType: VPC
      TrafficType: ALL

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet1"
    DependsOn:
      - VPCGateway
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: Public IP on launch is needed by the solution

  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet1RouteTable"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      SubnetId:
        Ref: PublicSubnet1

  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
    DependsOn:
      - VPCGateway

  NATGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/NATGatewayEIP1"

  PublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEIP1
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet1NATGateway"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet2"
    DependsOn:
      - VPCGateway
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: Public IP on launch is needed by the solution

  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet2RouteTable"

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      SubnetId:
        Ref: PublicSubnet2

  PublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
    DependsOn:
      - VPCGateway

  NATGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/NATGatewayEIP2"

  PublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEIP2
          - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PublicSubnet2NATGateway"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PrivateSubnet1"

  VPCPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PrivateSubnet1RouteTable"

  VPCPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTable
      SubnetId:
        Ref: PrivateSubnet1

  VPCPrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: PublicSubnet1NATGateway

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PrivateSubnet2"

  VPCPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${LCAStackName}/PrivateSubnet2RouteTable"

  VPCPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable
      SubnetId:
        Ref: PrivateSubnet2

  VPCPrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: PublicSubnet2NATGateway
