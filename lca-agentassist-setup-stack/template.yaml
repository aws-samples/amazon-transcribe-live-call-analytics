AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Amazon Transcribe Live Call Analytics with Agent Assist - Agent Assist Setup

Parameters:
  # Required
  LCAStackName:
    Type: String
    Description: LCA Stack Name

  # Required
  AISTACK:
    Type: String
    Description: AISTACK Stack ARN

  QNABOTSTACK:
    Type: String
    Description: QNABOT Stack ARN

  AgentAssistLLMBedrockModelId:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    AllowedValues:
      - "anthropic.claude-3-haiku-20240307-v1:0"
      - "anthropic.claude-3-sonnet-20240229-v1:0"

  BedrockKnowledgeBaseID:
    Type: String
    Default: ""
    AllowedPattern: "^(|[0-9a-zA-Z]{10})$"
    Description: >
      Provide the *id* (not name) of an existing Bedrock Knowledge Base to be used for Agent Assist bot.

  BedrockKnowledgeBaseS3BucketName:
    Type: String

  # Required
  LexAgentAssistBotId:
    Type: String
    Description: >-
      Lex Bot Id used for Agent Assist.
    AllowedPattern: "^(|[0-9a-zA-Z]{10})$"

  # Required
  LexAgentAssistAliasId:
    Type: String
    Description: >-
      Lex Bot Alias ID used for Agent Assist.
    AllowedPattern: "^(|[0-9a-zA-Z]{10})$"

  # Required
  LexAgentAssistLocaleId:
    Type: String
    Description: >-
      Lex Bot Locale ID used for Agent Assist.

  QnaAgentAssistDemoJson:
    Type: String
    Description: >-
      Location of QnABot agent assist sample/demo file (in JSON lines format)

  QnaBotSettings:
    Type: String
    Description:
      JSON string specifying key/value pairs to configure new defaults
      for QnAbot Settings

  WebAppBucket:
    Type: String
    Description: The LCA Web App Bucket Name.

  CloudFrontDistributionId:
    Type: String
    Description: The LCA web app CloudFront distribution id

  # Changes to Params below force AgentAssist Setup to update.
  LexAgentAssistIdentityPoolId:
    Type: String
  CloudFrontDomainName:
    Type: String
  FetchTranscriptFunctionArn:
    Type: String
  TranscriptSummaryFunctionArn:
    Type: String
  TranscribeLanguageCode:
    Type: String
  TranscriptLambdaHookFunctionArn:
    Type: String
  TranscriptLambdaHookFunctionNonPartialOnly:
    Type: String
  DynamoDbExpirationInDays:
    Type: String
  EndOfCallTranscriptSummary:
    Type: String
  EndOfCallLambdaHookFunctionArn:
    Type: String
  CallAudioSource:
    Type: String
  ComprehendLanguageCode:
    Type: String
  AgentAssistOption:
    Type: String
  AgentAssistExistingLexV2BotId:
    Type: String
  AgentAssistExistingLexV2BotAliasId:
    Type: String
  AgentAssistExistingLambdaFunctionArn:
    Type: String
  AgentAssistWebCrawlURLs:
    Type: String
  AgentAssistWebCrawlSyncScope:
    Type: String
  IsSentimentAnalysisEnabled:
    Type: String
  SentimentNegativeScoreThreshold:
    Type: String
  SentimentPositiveScoreThreshold:
    Type: String
  Version:
    Type: String
  CloudWatchLogsExpirationInDays:
    Type: Number
    Default: 14
    Description: The number of days log events are kept in CloudWatch Logs.

Conditions:
  ShouldConfigureQnabot: !Not [!Equals [!Ref QNABOTSTACK, ""]]
  ShouldConfigureBedrockKB: !Not [!Equals [!Ref BedrockKnowledgeBaseID, ""]]
  ShouldConfigureBedrockLLM:
    !And [
      !Condition ShouldConfigureQnabot,
      !Not [!Condition ShouldConfigureBedrockKB],
    ]
  HasSummaryLambdaFunction:
    !Not [!Equals [!Ref TranscriptSummaryFunctionArn, ""]]
  IsBedrockKnowledgeBaseS3BucketName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: BedrockKnowledgeBaseS3BucketName

Resources:
  # Custom resource to transform input to lowercase.
  GetLowercaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.12
      Timeout: 30
      InlineCode: |
        import cfnresponse
        import time
        def handler(event, context):                                                    
            output = event['ResourceProperties'].get('InputString', '').lower()
            responseData = {'OutputString': output}                                            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      LoggingConfig:
        LogGroup:
          Fn::Sub: /${AWS::StackName}/lambda/GetLowercaseFunction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
    DependsOn:
      - GetLowercaseFunctionLogGroup

  GetLowercaseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/lambda/GetLowercaseFunction
      RetentionInDays:
        Ref: CloudWatchLogsExpirationInDays

  LowercaseStackName:
    Type: Custom::GetLowercase
    Properties:
      ServiceToken: !GetAtt GetLowercaseFunction.Arn
      InputString: !Ref LCAStackName

  LambdaHookSummarizeCallRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - Fn::If:
            - HasSummaryLambdaFunction
            - PolicyName: InlinePolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action: lambda:InvokeFunction
                    Effect: Allow
                    Resource: !Ref TranscriptSummaryFunctionArn
            - Ref: AWS::NoValue

  QNASummarizeCallFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-SummarizeCall-${LCAStackName}"
      Role: !GetAtt LambdaHookSummarizeCallRole.Arn
      Handler: qna_summarize_call_function.handler
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          TRANSCRIPT_SUMMARY_FUNCTION_ARN: !Ref TranscriptSummaryFunctionArn
      Code: ./src
      LoggingConfig:
        LogGroup:
          Fn::Sub: /${AWS::StackName}/lambda/QNASummarizeCallFunction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
          - id: W58
            reason: Managed policy already provides access to CloudWatch logs.
    DependsOn:
      - QNASummarizeCallFunctionLogGroup

  QNASummarizeCallFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/lambda/QNASummarizeCallFunction
      RetentionInDays:
        Ref: CloudWatchLogsExpirationInDays

  Boto3Layer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content: ./boto3_layer
      CompatibleRuntimes:
        - python3.12

  QNABedrockKnowledgeBaseFunctionRole:
    Condition: ShouldConfigureBedrockKB
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:Retrieve"
                  - "bedrock:RetrieveAndGenerate"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${BedrockKnowledgeBaseID}"
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${AgentAssistLLMBedrockModelId}"
          PolicyName: BedrockPolicy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - "arn:aws:s3:::*-importbucket-*/*"
                  - !If
                    - IsBedrockKnowledgeBaseS3BucketName
                    - !Sub "arn:aws:s3:::${BedrockKnowledgeBaseS3BucketName}/*"
                    - !Ref AWS::NoValue
          PolicyName: S3BucketPolicy
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !Ref FetchTranscriptFunctionArn

  QNABedrockKnowledgeBaseFunction:
    Condition: ShouldConfigureBedrockKB
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-${LCAStackName}-BedrockKB-LambdaHook"
      Role: !GetAtt QNABedrockKnowledgeBaseFunctionRole.Arn
      Handler: qna_bedrockkb_lambdahook_function.handler
      Runtime: python3.12
      Layers:
        - !Ref Boto3Layer
      Timeout: 900
      Environment:
        Variables:
          FETCH_TRANSCRIPT_FUNCTION_ARN: !Ref FetchTranscriptFunctionArn
          KB_ID: !Ref BedrockKnowledgeBaseID
          MODEL_ID: !Ref AgentAssistLLMBedrockModelId
      Code: ./src
      LoggingConfig:
        LogGroup:
          Fn::Sub: /${AWS::StackName}/lambda/QNABedrockKnowledgeBaseFunction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
    DependsOn:
      - QNABedrockKnowledgeBaseFunctionLogGroup

  QNABedrockKnowledgeBaseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/lambda/QNABedrockKnowledgeBaseFunction
      RetentionInDays:
        Ref: CloudWatchLogsExpirationInDays

  QNABedrockLLMFunctionRole:
    Condition: ShouldConfigureBedrockLLM
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${AgentAssistLLMBedrockModelId}"
          PolicyName: BedrockPolicy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::*-importbucket-*/*"
          PolicyName: S3ImportBucketPolicy
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !Ref FetchTranscriptFunctionArn

  QNABedrockLLMFunction:
    Condition: ShouldConfigureBedrockLLM
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-${LCAStackName}-BedrockLLM-LambdaHook"
      Role: !GetAtt QNABedrockLLMFunctionRole.Arn
      Handler: qna_bedrockllm_lambdahook_function.handler
      Runtime: python3.12
      Layers:
        - !Ref Boto3Layer
      Timeout: 900
      Environment:
        Variables:
          FETCH_TRANSCRIPT_FUNCTION_ARN: !Ref FetchTranscriptFunctionArn
          MODEL_ID: !Ref AgentAssistLLMBedrockModelId
      Code: ./src
      LoggingConfig:
        LogGroup:
          Fn::Sub: /${AWS::StackName}/lambda/QNABedrockLLMFunction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
    DependsOn:
      - QNABedrockLLMFunctionLogGroup

  QNABedrockLLMFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/lambda/QNABedrockLLMFunction
      RetentionInDays:
        Ref: CloudWatchLogsExpirationInDays

  SetupFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResource
                Effect: Allow
                Resource:
                  - !Ref AISTACK
              - Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LCAStackName}*"
              - Action:
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${WebAppBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${WebAppBucket}/*"
              - Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}"
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - cloudformation:DescribeStacks
                    - cloudformation:DescribeStackResource
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${LCAStackName}-QNABOT*"
                - !Ref AWS::NoValue
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - ssm:GetParameter
                    - ssm:PutParameter
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CFN-DefaultQnABotSettings*"
                - !Ref AWS::NoValue
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - s3:GetObject
                    - s3:PutObject
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:s3:::${LowercaseStackName.OutputString}*"
                    - !Sub "arn:aws:s3:::${QnaAgentAssistDemoJson}"
                - !Ref AWS::NoValue
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - lambda:InvokeFunction
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LCAStackName}*"
                - !Ref AWS::NoValue
  SetupFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt SetupFunctionRole.Arn
      Handler: setup_function.handler
      Runtime: python3.12
      Timeout: 900
      Code: ./src
      LoggingConfig:
        LogGroup:
          Fn::Sub: /${AWS::StackName}/lambda/SetupFunction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
          - id: W58
            reason: Managed policy already provides access to CloudWatch logs.
    DependsOn:
      - SetupFunctionLogGroup

  SetupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/lambda/SetupFunction
      RetentionInDays: !Ref CloudWatchLogsExpirationInDays

  SetupFunctionResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupFunction.Arn
      AISTACK: !Ref AISTACK
      QNABOTSTACK: !Ref QNABOTSTACK
      LexAgentAssistBotId: !Ref LexAgentAssistBotId
      LexAgentAssistAliasId: !Ref LexAgentAssistAliasId
      LexAgentAssistLocaleId: !Ref LexAgentAssistLocaleId
      QnaAgentAssistDemoJson: !Ref QnaAgentAssistDemoJson
      QNASummarizeCallFunction: !Ref QNASummarizeCallFunction
      QNAAgentAssistLambdaHookFunction: !If
        - ShouldConfigureBedrockKB
        - !Ref QNABedrockKnowledgeBaseFunction
        - !Ref QNABedrockLLMFunction
      QnaBotSettings: !Ref QnaBotSettings
      # Changes to Params below force AgentAssist Setup to execute.
      LexAgentAssistIdentityPoolId: !Ref LexAgentAssistIdentityPoolId
      TranscribeLanguageCode: !Ref TranscribeLanguageCode
      TranscriptLambdaHookFunctionArn: !Ref TranscriptLambdaHookFunctionArn
      TranscriptLambdaHookFunctionNonPartialOnly: !Ref TranscriptLambdaHookFunctionNonPartialOnly
      DynamoDbExpirationInDays: !Ref DynamoDbExpirationInDays
      EndOfCallTranscriptSummary: !Ref EndOfCallTranscriptSummary
      EndOfCallLambdaHookFunctionArn: !Ref EndOfCallLambdaHookFunctionArn
      CloudFrontDomainName: !Sub "https://${CloudFrontDomainName}/"
      CallAudioSource: !Ref CallAudioSource
      ComprehendLanguageCode: !Ref ComprehendLanguageCode
      AgentAssistOption: !Ref AgentAssistOption
      AgentAssistExistingLexV2BotId: !Ref AgentAssistExistingLexV2BotId
      AgentAssistExistingLexV2BotAliasId: !Ref AgentAssistExistingLexV2BotAliasId
      AgentAssistExistingLambdaFunctionArn: !Ref AgentAssistExistingLambdaFunctionArn
      AgentAssistWebCrawlURLs: !Ref AgentAssistWebCrawlURLs
      AgentAssistWebCrawlSyncScope: !Ref AgentAssistWebCrawlSyncScope
      IsSentimentAnalysisEnabled: !Ref IsSentimentAnalysisEnabled
      SentimentNegativeScoreThreshold: !Ref SentimentNegativeScoreThreshold
      SentimentPositiveScoreThreshold: !Ref SentimentPositiveScoreThreshold
      Version: !Ref Version
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
